# SAFE TO CUSTOMIZE - This file is copied once and not overwritten during sync
# Source: https://github.com/fredrikaverpil/github

version: '3'

vars:
  TASKFILES:
    sh: |
      case "$(uname -s)" in
        CYGWIN*|MINGW32*|MINGW64*|MSYS*)
          # Windows - use PowerShell
          powershell -Command "Get-ChildItem -Recurse -Filter 'Taskfile.*.yml' | Where-Object { \$_.FullName -notmatch 'node_modules|\.git' } | ForEach-Object { \$_.FullName -replace [regex]::Escape((Get-Location).Path), '.' -replace '\\\\', '/' } | Sort-Object"
          ;;
        *)
          # Unix-like (Linux, macOS)
          find . -name "Taskfile.*.yml" -type f | grep -v node_modules | grep -v .git | sort
          ;;
      esac

tasks:
  default:
    desc: List all available tasks
    silent: true
    cmds:
      - task --list

  all:
    desc: Run all static checking and tests
    cmds:
      - task: format
      - task: lint
      - task: test

  format:
    desc: Run format task from all taskfiles
    cmds:
      - cmd: task -t {{.TASKFILE}} format
        for:
          var: TASKFILES
          split: "\n"
          as: TASKFILE

  # lint:
  #   desc: Run lint task from all taskfiles
  #   cmds:
  #     - cmd: task -t {{.TASKFILE}} lint
  #       for:
  #         var: TASKFILES
  #         split: "\n"
  #         as: TASKFILE

  test:
    desc: Run test task from all taskfiles
    cmds:
      # - cmd: task -t {{.TASKFILE}} test
      #   for:
      #     var: TASKFILES
      #     split: "\n"
      #     as: TASKFILE
      - task: test-plenary

  test-clean:
    desc: Remove the .tests folder for a clean run
    cmds:
      - cmd: rm -rf .tests

  test-plenary:
    desc: Run tests with Neovim and plenary
    cmds:
      - cmd: nvim --headless --noplugin -i NONE -u spec/bootstrap.lua -c "PlenaryBustedDirectory spec/ { minimal_init = 'spec/minimal_init.lua', timeout = 500000 }"

  install:
    desc: Run install task from all taskfiles
    cmds:
      - cmd: task -t {{.TASKFILE}} install
        for:
          var: TASKFILES
          split: "\n"
          as: TASKFILE
