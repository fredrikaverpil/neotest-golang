# SAFE TO CUSTOMIZE - This file is copied once and not overwritten during sync
# Source: https://github.com/fredrikaverpil/github

version: '3'

vars:
  ROOT_DIR:
    sh: git rev-parse --show-toplevel
  TASKFILES:
    # Note: Uses sh/bash shell even on Windows (available through MSYS2, Git Bash, etc.)
    sh: |
      case "$(uname -s)" in
        CYGWIN*|MINGW32*|MINGW64*|MSYS*)
          # Windows - use PowerShell
          powershell -Command "Get-ChildItem -Recurse -Filter 'Taskfile.*.yml' | Where-Object { \$_.FullName -notmatch 'node_modules|\.git' } | ForEach-Object { \$_.FullName -replace [regex]::Escape((Get-Location).Path), '.' -replace '\\\\', '/' } | Sort-Object"
          ;;
        *)
          # Unix-like (Linux, macOS)
          find . -name "Taskfile.*.yml" -type f | grep -v node_modules | grep -v .git | sort
          ;;
      esac

tasks:
  default:
    desc: List all available tasks
    silent: true
    cmds:
      - task --list

  all:
    desc: Run all static checking and tests
    cmds:
      - task: format
      - task: lint
      - task: test

  format:
    desc: Run format task from all taskfiles
    cmds:
      - cmd: task -t {{.TASKFILE}} format
        for:
          var: TASKFILES
          split: "\n"
          as: TASKFILE
      - task: format-query

  # lint:
  #   desc: Run lint task from all taskfiles
  #   cmds:
  #     - cmd: task -t {{.TASKFILE}} lint
  #       for:
  #         var: TASKFILES
  #         split: "\n"
  #         as: TASKFILE

  test:
    desc: Run test task from all taskfiles
    cmds:
      # - cmd: task -t {{.TASKFILE}} test
      #   for:
      #     var: TASKFILES
      #     split: "\n"
      #     as: TASKFILE
      - task: test-plenary

  test-clean:
    desc: Remove the .tests folder for a clean run
    cmds:
      - cmd: rm -rf .tests

  test-plenary:
    desc: Run tests with Neovim and plenary
    cmds:
      - cmd: nvim --headless --noplugin -i NONE -u spec/bootstrap.lua -c "PlenaryBustedDirectory spec/ { minimal_init = 'spec/minimal_init.lua', timeout = 500000 }"

  test-file:
    desc: Run a single test file with Neovim and plenary
    cmds:
      - cmd: nvim --headless --noplugin -i NONE -u spec/bootstrap.lua -c "lua require('plenary.test_harness').test_directory_command('{{.CLI_ARGS}} { minimal_init = \"spec/minimal_init.lua\", timeout = 500000 }')"

  install:
    desc: Run install task from all taskfiles
    cmds:
      - cmd: task -t {{.TASKFILE}} install
        for:
          var: TASKFILES
          split: "\n"
          as: TASKFILE

  format-query:
    desc: Format tree-sitter query files with ts_query_ls
    cmds:
      - task: ensure-ts_query_ls
      - ts_query_ls format lua/neotest-golang/queries
      - ts_query_ls format lua/neotest-golang/features/testify/queries
      - git diff --color=always --exit-code

  lint-query:
    desc: Lint tree-sitter query files with ts_query_ls
    cmds:
      - task: ensure-ts_query_ls
      - ts_query_ls check lua/neotest-golang/queries
      - ts_query_ls check lua/neotest-golang/features/testify/queries

  lint-query-fix:
    desc: Lint and auto-fix tree-sitter query files
    cmds:
      - task: ensure-ts_query_ls
      - ts_query_ls check lua/neotest-golang/queries --fix
      - ts_query_ls check lua/neotest-golang/features/testify/queries --fix

  install-ts_query_ls:
    desc: Install ts_query_ls from GitHub
    cmds:
      - cargo install --git https://github.com/ribru17/ts_query_ls ts_query_ls

  ensure-ts_query_ls:
    internal: true
    status:
      - which ts_query_ls >/dev/null 2>&1
    cmds:
      - task: install-ts_query_ls
